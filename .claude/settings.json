// All comments must be deleted.
{
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "read input; if echo \"$input\" | grep -q '\"command\":\"ls'; then echo '{\"decision\": \"block\", \"reason\": \"Use eza instead of ls! Example: eza -1 --color=never --group-directories-first\"}'; elif echo \"$input\" | grep -q '\"command\":\"find'; then echo '{\"decision\": \"block\", \"reason\": \"Use fd instead of find! Example: fd --hidden --exclude .git --exclude node_modules --color=never --print0 <pattern>\"}'; elif echo \"$input\" | grep -q '\"command\":\"grep'; then echo '{\"decision\": \"block\", \"reason\": \"Use rg instead of grep! Example: rg --no-heading --color=never --json --trim --max-columns=120 <pattern>\"}'; elif echo \"$input\" | grep -q '\"command\":\"cat'; then echo '{\"decision\": \"block\", \"reason\": \"Use bat instead of cat! Example: bat --plain --paging=never --color=never <file>\"}'; fi"
          }
        ]
      }
    ]
  },
  "permissions": {
    "allow": [
      "Read(~/.zshrc)",                    // Check shell settings for command behavior issues
      
      // Rust
      "Bash(cargo build:*)",
      "Bash(cargo check:*)",
      "Bash(cargo clippy:*)",
      "Bash(cargo fmt:*)",
      "Bash(cargo audit:*)",
      
      // Go
      "Bash(make test-unit)",
      "Bash(make test-e2e)",
      "Bash(make test-all)",
      "Bash(go build:*)",
      "Bash(go mod:*)",
      "Bash(go vet:*)",
      "Bash(go fmt:*)",
      "Bash(go test:*)",
      "Bash(golangci-lint:*)",
      "Bash(goimports:*)",

      
      // Node.js/Frontend
      "Bash(npm run:*)",
      "Bash(yarn:*)",
      
      // Git operations (push is excluded and requires user confirmation)
      "Bash(git status)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git pull:*)",
      "Bash(git log:*)",
      "Bash(git show:*)",
      
      // High-performance search and file operation tools (prioritized over legacy tools)
      "Bash(rg:*)",                        // grep
     "Bash(fd:*)",                         // find
      "Bash(bat:*)",                       // cat
      "Bash(eza:*)",                       // ls

      // GitHub CLI
      "Bash(gh auth:*)",
      "Bash(gh pr view:*)",
      "Bash(gh pr list:*)",
      "Bash(gh pr checkout:*)",            // Checkout PR locally → View diff with delta → Fix immediately
      "Bash(gh issue view:*)",
      "Bash(gh issue list:*)",
      "Bash(gh repo view:*)",
      
      // Basic file operations
      "Bash(head:*)",
      "Bash(tail:*)",

      // MCP
      "mcp__serena__list_dir",
      "mcp__serena__find_file",
      "mcp__serena__replace_regex",
      "mcp__serena__search_for_pattern",
      "mcp__serena__restart_language_server",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__find_symbol",
      "mcp__serena__find_referencing_symbols",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__insert_before_symbol",
      "mcp__serena__write_memory",
      "mcp__serena__read_memory",
      "mcp__serena__list_memories",
      "mcp__serena__delete_memory",
      "mcp__serena__remove_project",
      "mcp__serena__switch_modes",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__onboarding",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__think_about_task_adherence",
      "mcp__serena__think_about_whether_you_are_done",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "ListMcpResourcesTool",
      "ReadMcpResourceTool",
      "mcp__playwright__screenshot",
      "mcp__playwright__navigate",
      "mcp__playwright__click",
      "mcp__playwright__fill",
      "mcp__playwright__select",
      "mcp__playwright__type",
      "mcp__playwright__press",
      "mcp__playwright__wait",
      "mcp__playwright__get_text",
      "mcp__playwright__get_attribute",
      "mcp__playwright__evaluate",
      "mcp__playwright__pdf"
    ],
    "deny": [
      "Read(*.env)",
      "Read(.aws/**)",
      "Read(.ssh/**)",
      "Edit(.env*)",
      "Edit(*.env)",
      "Edit(.aws/**)",
      "Edit(.ssh/**)",
      "Bash(sudo:*)"
    ]
  },
   "enabledMcpjsonServers": [
    "serena",
    "context7",
    "playwright"
  ],
  "env": {
    "RIPGREP_CONFIG_PATH": "$HOME/.ripgreprc",  // TODO: change full path
    "GIT_OPTIONAL_LOCKS": "0", // Avoid unnecessary locks during diff viewing sessions to stabilize Git operations
    "DISABLE_TELEMETRY": "1", // Flag to prevent external data transmission
    "RUST_LOG": "info"
  },
  "includeCoAuthoredBy": false,
  "statusLine": {
    "type": "command",
    "command": "ccusage statusline"
  },
  "model": "opusplan"
}

