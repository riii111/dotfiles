// All comments must be deleted.
{
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash(grep*)",
        "hooks": [
          {
            "type": "command",
            "command": "read input; if echo \"$input\" | grep -q '\"command\":\"ls'; then echo 'Use eza instead of ls!' >&2; echo 'Example: eza -1 --color=never --group-directories-first' >&2; exit 2; elif echo \"$input\" | grep -q '\"command\":\"find'; then echo 'Use fd instead of find!' >&2; echo 'Example: fd --hidden --exclude .git --exclude node_modules --color=never --print0 <pattern>' >&2; exit 2; elif echo \"$input\" | grep -q '\"command\":\"grep'; then echo 'Use rg instead of grep!' >&2; echo 'Example: rg --no-heading --color=never --json --trim --max-columns=120 <pattern>' >&2; exit 2; elif echo \"$input\" | grep -q '\"command\":\"cat'; then echo 'Use bat instead of cat!' >&2; echo 'Example: bat --plain --paging=never --color=never <file>' >&2; exit 2; fi"
          }
        ]
      }
    ]
  },
  "permissions": {
    "allow": [
      "Read(~/.zshrc)",                    // Check shell settings for command behavior issues
      
      // Rust
      "Bash(cargo build:*)",
      "Bash(cargo check:*)",
      "Bash(cargo clippy:*)",
      "Bash(cargo fmt:*)",
      "Bash(cargo audit:*)",
      
      // Go
      "Bash(make test-unit)",
      "Bash(make test-e2e)",
      "Bash(make test-all)",
      "Bash(go build:*)",
      "Bash(go mod:*)",
      "Bash(go vet:*)",
      "Bash(go fmt:*)",
      "Bash(go test:*)",
      "Bash(golangci-lint:*)",
      "Bash(goimports:*)",

      
      // Node.js/Frontend
      "Bash(npm run:*)",
      "Bash(yarn:*)",
      
      // Git operations (push is excluded and requires user confirmation)
      "Bash(git status)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git pull:*)",
      "Bash(git log:*)",
      "Bash(git show:*)",
      
      // High-performance search and file operation tools (prioritized over legacy tools)
      "Bash(rg:*)",                        // grep
     "Bash(fd:*)",                         // find
      "Bash(bat:*)",                       // cat
      "Bash(eza:*)",                       // ls

      // GitHub CLI
      "Bash(gh auth:*)",
      "Bash(gh pr view:*)",
      "Bash(gh pr list:*)",
      "Bash(gh pr checkout:*)",            // Checkout PR locally → View diff with delta → Fix immediately
      "Bash(gh issue view:*)",
      "Bash(gh issue list:*)",
      "Bash(gh repo view:*)",
      
      // Basic file operations
      "Bash(head:*)",
      "Bash(tail:*)"
    ],
    "deny": [
      "Read(*.env)",
      "Read(.aws/**)",
      "Read(.ssh/**)",
      "Edit(.env*)",
      "Edit(*.env)",
      "Edit(.aws/**)",
      "Edit(.ssh/**)",
      "Bash(sudo:*)"
    ]
  },
  "env": {
    "RIPGREP_CONFIG_PATH": "$HOME/.ripgreprc",  // TODO: change full path
    "GIT_OPTIONAL_LOCKS": "0", // Avoid unnecessary locks during diff viewing sessions to stabilize Git operations
    "DISABLE_TELEMETRY": "1", // Flag to prevent external data transmission
    "RUST_LOG": "info"
  },
  "includeCoAuthoredBy": false
}

